import React, { useEffect, useState, useCallback } from \'react\';\nimport { useNavigate, useParams } from \'react-router-dom\';\nimport { TextField, Button, MenuItem, FormControl, InputLabel, Select, OutlinedInput, Chip, Box, Typography, Paper, Alert } from \'@mui/material\'; // Added Typography, Paper, Alert\nimport api from \'../api\';\n\nconst DEFAULT_AGENT_CONFIG = {\n  name:\'\',\n  tools:[],\n  llm:{\n    provider:\'openai\',\n    model:\'\',\n    temperature:0.0,\n    max_tokens: null // Allow null for max_tokens\n  },\n  prompt:{\n    system:\'\',\n    user:\'\'\n  },\n  max_turns:5\n};\n\nexport default function AgentEditor() {\n  const { name } = useParams();\n  const isEditMode = Boolean(name);\n  const nav = useNavigate();\n  const [allTools, setAllTools] = useState([]);\n  const [cfg, setCfg] = useState(DEFAULT_AGENT_CONFIG);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [success, setSuccess] = useState(null);\n\n  // Fetch available tools\n  useEffect(() => {\n    setLoading(true);\n    api.getTools()\n      .then(r => setAllTools(r.data))\n      .catch(err => {\n        console.error(\"Error fetching tools:\", err);\n        setError(\"Failed to load available tools.\");\n      })\n      .finally(() => setLoading(false));\n  }, []);\n\n  // Fetch agent config if in edit mode\n  useEffect(() => {\n    if (isEditMode) {\n      setLoading(true);\n      setError(null);\n      api.getAgents()\n        .then(r => {\n          const agentToEdit = r.data.find(x => x.name === name);\n          if (agentToEdit) {\n            // Ensure all fields from default are present\n            setCfg({ ...DEFAULT_AGENT_CONFIG, ...agentToEdit });\n          } else {\n            setError(`Agent \'${name}\' not found.`);\n            // Optionally navigate back or show a clearer message\n            // nav(\'/\');\n          }\n        })\n        .catch(err => {\n          console.error(\"Error fetching agent:\", err);\n          setError(\"Failed to load agent configuration.\");\n        })\n        .finally(() => setLoading(false));\n    }\ else {\n      // Reset to default for new agent creation\n      setCfg(DEFAULT_AGENT_CONFIG);\n    }\n  }, [isEditMode, name, nav]); // Add nav to dependencies if used inside effect\n\n  const handleInputChange = useCallback((path, value) => {\n    setCfg(prevCfg => {\n      const keys = path.split(\'.\');\n      let current = { ...prevCfg };\n      let temp = current;\n      for (let i = 0; i < keys.length - 1; i++) {\n        temp = temp[keys[i]];\n      }\n      temp[keys[keys.length - 1]] = value;\n      return current;\n    });\n  }, []);\n\n  const handleSave = () => {\n    setLoading(true);\n    setError(null);\n    setSuccess(null);\n\n    // Basic validation\n    if (!cfg.name.trim()) {\n        setError(\"Agent Name is required.\");\n        setLoading(false);\n        return;\n    }\n    if (!cfg.llm.model.trim()) {\n        setError(\"Model Name is required.\");\n        setLoading(false);\n        return;\n    }\n\n    // Prepare payload (ensure numbers are numbers)\n    const payload = {\n        ...cfg,\n        llm: {\n            ...cfg.llm,\n            temperature: parseFloat(cfg.llm.temperature) || 0.0,\n            max_tokens: cfg.llm.max_tokens ? parseInt(cfg.llm.max_tokens) : null\n        },\n        max_turns: parseInt(cfg.max_turns) || 5\n    };\n\n    const action = isEditMode ? api.updateAgent(name, payload) : api.createAgent(payload);\n    action\n      .then(() => {\n        setSuccess(`Agent \'${cfg.name}\' ${isEditMode ? \'updated\' : \'created\'} successfully!`);\n        setTimeout(() => nav(\'/\'), 1500); // Navigate back after success\n      })\n      .catch(err => {\n        console.error(\"Error saving agent:\", err);\n        setError(err.response?.data?.detail || `Failed to ${isEditMode ? \'update\' : \'create\'} agent.`);\n      })\n      .finally(() => setLoading(false));\n  };\n\n  return (\n    <Box component={Paper} sx={{ p: 3 }}>\n      <Typography variant=\"h5\" gutterBottom>{isEditMode ? `Edit Agent: ${name}` : \'Create New Agent\'}</Typography>\n\n      {error && <Alert severity=\"error\" sx={{ mb: 2 }}>{error}</Alert>}\n      {success && <Alert severity=\"success\" sx={{ mb: 2 }}>{success}</Alert>}\n\n      <Box component=\"form\" sx={{ display:\'flex\', flexDirection:\'column\', gap: 2.5 }}>\n        <TextField\n          label=\"Agent Name\"\n          value={cfg.name}\n          onChange={e => handleInputChange(\'name\', e.target.value)}\n          required\n          disabled={isEditMode || loading} // Disable name change in edit mode\n        />\n        <FormControl>\n          <InputLabel>Tools</InputLabel>\n          <Select\n            multiple\n            value={cfg.tools}\n            onChange={e => handleInputChange(\'tools\', e.target.value)}\n            input={<OutlinedInput label=\"Tools\" />}\n            renderValue={(selected) => (\n              <Box sx={{ display: \'flex\', flexWrap: \'wrap\', gap: 0.5 }}>\n                {selected.map(toolName => <Chip key={toolName} label={toolName} size=\"small\" />)}\n              </Box>\n            )}\n            disabled={loading}\n          >\n            {allTools.length === 0 && <MenuItem disabled>Loading tools...</MenuItem>}\n            {allTools.map(t => <MenuItem key={t.name} value={t.name}>{t.name}</MenuItem>)}\n          </Select>\n        </FormControl>\n        <TextField\n          label=\"System Prompt\"\n          multiline\n          rows={4}\n          value={cfg.prompt.system}\n          onChange={e => handleInputChange(\'prompt.system\', e.target.value)}\n          disabled={loading}\n        />\n        <TextField\n          label=\"User Prompt / Initial Task\"\n          multiline\n          rows={2}\n          value={cfg.prompt.user}\n          onChange={e => handleInputChange(\'prompt.user\', e.target.value)}\n          disabled={loading}\n        />\n        <FormControl fullWidth>\n          <InputLabel>LLM Provider</InputLabel>\n          <Select\n            value={cfg.llm.provider}\n            onChange={e => handleInputChange(\'llm.provider\', e.target.value)}\n            label=\"LLM Provider\"\n            disabled={loading}\n          >\n            <MenuItem value=\"openai\">OpenAI</MenuItem>\n            <MenuItem value=\"anthropic\">Anthropic</MenuItem>\n            <MenuItem value=\"gemini\">Gemini</MenuItem>\n            {/* Add other providers if supported by backend */}\n          </Select>\n        </FormControl>\n        <TextField\n          label=\"Model Name\"\n          value={cfg.llm.model}\n          onChange={e => handleInputChange(\'llm.model\', e.target.value)}\n          required\n          helperText=\"e.g., gpt-4, claude-3-opus-20240229, gemini-pro\"\n          disabled={loading}\n        />\n        <TextField\n          type=\"number\"\n          label=\"Temperature\"\n          value={cfg.llm.temperature}\n          onChange={e => handleInputChange(\'llm.temperature\', e.target.value)}\n          inputProps={{ step: \"0.1\", min: \"0\", max: \"2\" }}\n          disabled={loading}\n        />\n         <TextField\n          type=\"number\"\n          label=\"Max Tokens (Optional)\"\n          value={cfg.llm.max_tokens ?? \'\'} // Handle null by showing empty string\n          onChange={e => handleInputChange(\'llm.max_tokens\', e.target.value ? parseInt(e.target.value) : null)}\n          inputProps={{ min: \"1\" }}\n          helperText=\"Leave blank for default.\"\n          disabled={loading}\n        />\n        <TextField\n          type=\"number\"\n          label=\"Max Turns\"\n          value={cfg.max_turns}\n          onChange={e => handleInputChange(\'max_turns\', e.target.value)}\n          inputProps={{ min: \"1\" }}\n          disabled={loading}\n        />\n        <Box sx={{ display: \'flex\', gap: 1, mt: 1 }}>\n            <Button variant=\"contained\" onClick={handleSave} disabled={loading}>\n              {loading ? \'Saving...\' : (isEditMode ? \'Update Agent\' : \'Create Agent\')}\n            </Button>\n            <Button variant=\"outlined\" onClick={() => nav(\'/\')} disabled={loading}>\n              Cancel\n            </Button>\n        </Box>\n      </Box>\n    </Box>\n  );\n}