[pytest]
# Pytest configuration for backend tests

# Minimum Python version
minversion = 3.9

# Test discovery patterns
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Test paths
testpaths = tests

# Add project root to Python path
pythonpath = .

# Output options
addopts =
    # Verbose output
    -v
    # Show extra test summary info
    -ra
    # Show local variables in tracebacks
    --showlocals
    # Strict markers (fail on unknown markers)
    --strict-markers
    # Strict config (fail on config errors)
    --strict-config
    # Coverage options (uncomment to enable by default)
    # --cov=.
    # --cov-report=html
    # --cov-report=term-missing
    # --cov-fail-under=80
    # Disable warnings
    --disable-warnings
    # Show durations of slowest tests
    --durations=10

# Markers for categorizing tests
markers =
    unit: Unit tests (fast, isolated)
    integration: Integration tests (slower, may use external services)
    e2e: End-to-end tests (slowest, full system tests)
    slow: Tests that take more than 1 second
    asyncio: Async tests
    websocket: WebSocket tests
    database: Tests that use database
    requires_api: Tests that require external API (OpenAI, Anthropic)
    requires_display: Tests that require X11/display server

# Async test configuration
asyncio_mode = auto

# Coverage options
[coverage:run]
source = .
omit =
    */tests/*
    */venv/*
    */__pycache__/*
    */site-packages/*
    */workspace/*
    */scripts/*

[coverage:report]
# Fail if coverage is below this percentage
# fail_under = 80
exclude_lines =
    # Standard exclusions
    pragma: no cover
    def __repr__
    def __str__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    if TYPE_CHECKING:
    @abstractmethod
    @abstract
    # Debug code
    if self.debug:
    if settings.DEBUG
    # Type checking
    if typing.TYPE_CHECKING:

[coverage:html]
directory = htmlcov
