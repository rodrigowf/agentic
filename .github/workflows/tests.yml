name: Test Suite

on:
  push:
    branches: [main, develop, tests]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  # ============================================================================
  # Backend Tests
  # ============================================================================

  backend-lint:
    name: Backend - Lint & Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          cd backend
          pip install flake8 black isort
          pip install -r requirements.txt

      - name: Check code formatting with Black
        run: |
          cd backend
          black --check .

      - name: Check import sorting with isort
        run: |
          cd backend
          isort --check-only .

      - name: Lint with flake8
        run: |
          cd backend
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  backend-unit-tests:
    name: Backend - Unit Tests
    runs-on: ubuntu-latest
    needs: backend-lint
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio pytest-mock

      - name: Run unit tests
        run: |
          cd backend
          pytest tests/unit/ -v --cov=. --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend-unit
          name: backend-unit-coverage

  backend-integration-tests:
    name: Backend - Integration Tests
    runs-on: ubuntu-latest
    needs: backend-unit-tests
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio pytest-mock httpx

      - name: Run integration tests
        run: |
          cd backend
          pytest tests/integration/ -v --cov=. --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend-integration
          name: backend-integration-coverage

  backend-e2e-tests:
    name: Backend - E2E Tests
    runs-on: ubuntu-latest
    needs: backend-integration-tests
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio pytest-mock

      - name: Run E2E tests
        run: |
          cd backend
          pytest tests/e2e/ -v --cov=. --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend-e2e
          name: backend-e2e-coverage

  # ============================================================================
  # Frontend Tests
  # ============================================================================

  frontend-lint:
    name: Frontend - Lint & Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Check formatting
        run: |
          cd frontend
          npm run format:check || echo "Formatting check skipped (no script configured)"

      - name: Lint
        run: |
          cd frontend
          npm run lint || echo "Linting skipped (no script configured)"

  frontend-unit-tests:
    name: Frontend - Unit Tests
    runs-on: ubuntu-latest
    needs: frontend-lint
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Run unit tests
        run: |
          cd frontend
          CI=true npm run test:ci

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/coverage-final.json
          flags: frontend-unit
          name: frontend-unit-coverage

  frontend-integration-tests:
    name: Frontend - Integration Tests
    runs-on: ubuntu-latest
    needs: frontend-unit-tests
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Run integration tests
        run: |
          cd frontend
          CI=true npm run test:integration -- --coverage --watchAll=false

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/coverage-final.json
          flags: frontend-integration
          name: frontend-integration-coverage

  frontend-e2e-tests:
    name: Frontend - E2E Tests
    runs-on: ubuntu-latest
    needs: frontend-integration-tests
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Set up Python (for backend)
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install backend dependencies
        run: |
          cd backend
          pip install -r requirements.txt

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Install Playwright browsers
        run: |
          cd frontend
          npx playwright install --with-deps chromium

      - name: Start backend server
        run: |
          cd backend
          uvicorn main:app --host 0.0.0.0 --port 8000 &
          sleep 5

      - name: Run E2E tests
        run: |
          cd frontend
          npm run test:e2e -- --reporter=html

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-report
          path: frontend/playwright-report/
          retention-days: 30

  # ============================================================================
  # Test Summary
  # ============================================================================

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs:
      - backend-unit-tests
      - backend-integration-tests
      - backend-e2e-tests
      - frontend-unit-tests
      - frontend-integration-tests
      - frontend-e2e-tests
    if: always()
    steps:
      - name: Check test results
        run: |
          echo "All tests completed!"
          echo "Backend Unit Tests: ${{ needs.backend-unit-tests.result }}"
          echo "Backend Integration Tests: ${{ needs.backend-integration-tests.result }}"
          echo "Backend E2E Tests: ${{ needs.backend-e2e-tests.result }}"
          echo "Frontend Unit Tests: ${{ needs.frontend-unit-tests.result }}"
          echo "Frontend Integration Tests: ${{ needs.frontend-integration-tests.result }}"
          echo "Frontend E2E Tests: ${{ needs.frontend-e2e-tests.result }}"

      - name: Determine overall status
        run: |
          if [ "${{ needs.backend-unit-tests.result }}" != "success" ] || \
             [ "${{ needs.backend-integration-tests.result }}" != "success" ] || \
             [ "${{ needs.backend-e2e-tests.result }}" != "success" ] || \
             [ "${{ needs.frontend-unit-tests.result }}" != "success" ] || \
             [ "${{ needs.frontend-integration-tests.result }}" != "success" ] || \
             [ "${{ needs.frontend-e2e-tests.result }}" != "success" ]; then
            echo "Some tests failed!"
            exit 1
          fi
          echo "All tests passed!"
